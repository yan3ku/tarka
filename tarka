#!/bin/sh
# backup
# this script first unpacks any older incremental backups and then rsynces first
#
# set -xe

parse() {
    rest="$(basename "$1")"

    psrc="$(echo "~${rest%~*}~" | tr '~' '/')"
    rest="${1##*~}"

    pdate="${rest%=*}"
    rest="${rest##*=}"

    phash="${rest%!*}"
    rest="${rest##*!}"

    # cut after -- and extension
    pnr="${rest%--*}"
    pnr="${pnr%.*}"

    rest="${rest##*--}"
    rest="${rest%.*}"
    if [ "$pnr" = "$rest" ];then
        ptag=""
        return
    fi

    ptag="${rest}"

    # echo "psrc $psrc"
    # echo "date $pdate"
    # echo "hash $phash"
    # echo "pnr $pnr"
}

latest() {
    latest=""
    for i in "$repo"/"$1"*; do
        [ "${i##*.}" != snar ] && latest="$i"
    done
}

untar() {
    for i in "$repo"/"$1"*"$2"*.tar; do
        echo "untaring $i..."
        tar xf "$i" -C "$repo/" -G
    done
}

mangle_path() {
    p="${1%/}"
    p="$(echo "${p#/}" | tr '/' '~')"
}

setsrc() {
    src=$(realpath "$1")
    mangle_path "$src"
    src_mangled="$p"
}

genhash() {
    date +%s | md5sum | head -c 8
}

# setargs SRC [TAG]
setargs() {
    setsrc "$1"
    tag=${2:-}
    date=$(date +'%Y-%m-%d__%H-%M.%S')
    latest "$src_mangled"

    if [ -n "$isfull" ] || [ ! -e "$latest" ]; then
        isfull=1
        hash="$(genhash)"
        nr="0"
    else
        parse "$latest"
        hash="$phash"
        nr="$((pnr+1))"
    fi

    group="${repo}/${src_mangled}~${hash}"
    dst="${repo}/${src_mangled}~${date}=${hash}!${nr}${tag:+--}${tag}"
}

list() {
    mangle_path "$1"
    printf "%-40s %-30s %-8s %-4s %s\n" "src" "date" "hash" "nr" "tag"
    for i in "$repo/${p}"*.tar; do
        parse "$i"
        printf "%-40s %-30s %8s %-4s %s\n" "$psrc" "$pdate" "$phash" "$pnr" "$ptag"
    done
}

sync() {
    # exit 0
    rsync -avz --delete \
          "${1}/" \
          "${2}"
    # --exclude-from="$0-ignore" \
}

roll() {
    tar cvf "${2}.tar" "${1}" -g "${1}.snar" --xform="s|^${repo}/||"
}

usage() {
    echo "$0 cmd repo cmd_args"
    exit 1
}

is_repo() {
    test -e "$repo/.repo" || usage
}

restore() {

}

main() {
    test -n "$1" || usage
    test -n "$2" || usage

    cmd="$1"
    repo=${2%/}
    is_repo
    shift && shift
    case "$cmd" in
        f*)  isfull=1  && break;;
        i*)  isinc=1   && break;;
        r*)  isres=1   && break;;
        l*)  list "$@" && exit;;
        *) echo "invalid operation: $cmd;" >&2
           exit 1;;
    esac
    src="$1"
    tag="$2"

    setargs "$src" "$2"

    printf "%-15s : %s\n" "tag" "$tag"
    printf "%-15s : %s\n" "group" "$group"
    printf "%-15s : %s\n" "latest" "$latest"
    printf "%-15s : %s\n" "destination" "$dst"
    echo "----------"

    [ -z "$isfull" ] && untar "$src_mangled" "$hash"
    sync "$src" "$group"
    roll "$group" "$dst"
    rm -rf "${group}"
}

main "$@"
